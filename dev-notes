Personal github access token
-----------------------------
ed-access-token
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


Settings -> Cross Settings
---------------
Prefix:
arm-none-linux-gnueabihf-

Path:
/home/gdc419/gcc-linaro/bin

Linker Options
----------------

-L/srv/nfs/rootfs/usr/lib -Wl,-rpath-link,/srv/nfs/rootfs/usr/lib -L/srv/nfs/rootfs/lib -Wl,-rpath-link,/srv/nfs/rootfs/lib

-L/home/gdc419/Images/Apalis-iMX6_Reference-Multimedia-Image-upstream-Tezi_5.6.0+build.18/usr/lib -Wl,-rpath-link,/home/gdc419/Images/Apalis-iMX6_Reference-Multimedia-Image-upstream-Tezi_5.6.0+build.18/usr/lib -L/home/gdc419/Images/Apalis-iMX6_Reference-Multimedia-Image-upstream-Tezi_5.6.0+build.18/lib -Wl,-rpath-link,/home/gdc419/Images/Apalis-iMX6_Reference-Multimedia-Image-upstream-Tezi_5.6.0+build.18/lib


Miscellanous Optimization Options
------------------------------------

-march=armv7-a -fno-tree-vectorize -mthumb-interwork -mfloat-abi=hard -mtune=cortex-a9 -Wno-poison-system-directories


C/C++ -> Settings -> Build Steps -> Post Processing
----------------------------------------------------

Command:
scp ~/Projects/fbtest/Debug/fbtest root@192.168.20.64:/home/root/
scp ~/Projects/lv_port_linux_frame_buffer/Debug/lvglfb root@192.168.20.64:/home/root/

Description:
Copy fbtest Debug to Target
Copy lvglfb Debug to Target


Symbolic links
-------------------
ln -s longfilename target

tar - unzip
----------------
tar xvf tarfilename


To test input events
---------------------
Try typing the following at the terminal:

cat /dev/input/event1

Then move the input device (i.e. mouse) and you should see characters being streamed to the display if event1 is mapped to the mouse for example.

You can test the event devices with the "evtest" utility.
Type:
evtest

And you should get a list of available input devices.
You will need to run at root, so you may need to ad sudo

sudo evtest

if not installed:
sudo apt install evtest

Display Resolution
--------------------
Can use:
xrandr

xrandr is an official configuration utility to the RandR (Resize and Rotate) X Window System extension.
It can be used to set the size, orientation or reflection of the outputs for a screen.


Check GPIO config
--------------------
cat /sys/kernel/debug/gpio

tty
------
Type:
tty
to see what terminal you are

Type:
who
to see all the terminals you are logged into


Testing a serial port
-----------------------
Notes from:
https://developer.toradex.com/getting-started/module-3-hardware-peripherals/basic-uart-usage-apalis-evaluation-board-apalis-imx6

For testing UART2

From a serial terminal connected to the module, configure the UART2 baud rate using the stty command. We will use a baud rate of 9600 baud:

	stty -F /dev/ttymxc1 9600 -echo

Use the cat command to listen for incoming data on the serial port:

	cat < /dev/ttymxc1 &

Write to the serial port. The characters sent will be printed back to you in the next line:

	echo "Testing UART" > /dev/ttymxc1
	
Testing UART

A UART loopback test can also be written in C.

Termios, the Unix API for terminal I/O will be employed.

An example will be introduced step-by-step. First of all, include some libraries and initialize variables:


Graph - Dot
--------------
To install:
	sudo apt install graphviz
	
website:
	graphviz.org
	
	
usage:
	dot example.dot -Tpdf > example.pdf
	
Creates a pdf file, can also create a jpg or svg file
	
sample code:
directional graph

digraph {
    p1 -> p2;
    p2 -> p3;
    p1 -> p3;
}

non-directional graph

graph {
    p1 -- p2;
    p2 -- p3;
    p1 -- p3;
}


ASSERT and FAIL_IF Macros
--------------------------
#define ASSERT(cond, desc, serror) if( !(cond) )\
{fprintf(stderr, "ASSERT error, %s, line %d, file(%s), function(%s), errno(%s)\n", \
desc, __LINE__, __FILE__, __FUNCTION__, serror);}

// TODO - add return and switch over?
#define ASSERTNEW(cond, desc, serror) if( !(cond) )\
{fprintf(stderr, "ASSERT error, %s, line %d, file(%s), function(%s)\n", \
desc, __LINE__, __FILE__, __FUNCTION__);}

#define FAIL_IF(EXP,RCODE) {if(EXP) {fprintf(stderr,"errno(%s), file(%s), \
function(%s), line(%d)\n", strerror(errno), __FILE__, __FUNCTION__,__LINE__); \
return RCODE;}}

gdb debugger
--------------
break or b - set break point
run or r - run program
next or n - next (step to next c instruction
s - step in
n - next
p 'n'- display, where 'n' is a variable name
ref - display refresh (will use often)
list - list source code
x/16xb [address]- examine 16 bytes formated in hex starting at address.
    x/16xb 0x555555556004
    good for looking at a variable or structure in hex.

setting a break condition:
break <filename.c>:<line number> <condition>
break icorrupt.c:30 if(x>255)
break icorrupt.c:30 if x>255

Can use a TUI in gdb
TUI is a crude gdb GUI

Type:
layout next

This will launch the TUI.
It has several display formats, keep typing 'layout next' to cycle thru all the layouts

Need to explore the 'target remote localhost:2000' on gdb...

stack
---------
internal variable to find out stack frame address
__builtin_frame_address(0)


Some TUI's that are open source
-------------------------------
- xdialog
-Tcl/Tk

git
------

To get the current branch that you are on:
git rev-parse --abbrev-ref HEAD

To get the sha of what you checked out:
some examples:
git rev-parse development
git rev-parse origin/master

git rev-parse origin/master # to get the latest commit on the remote
git rev-parse HEAD          # to get the latest commit on the local 

source
-------
Can use "source" to execute a text file that contains linux commands

realative paths
----------------
Use realpath() function to get full path from a realitive path

Unit test utilities
-------------------
criterion *
unity ?
cmock
ceedling
minunit *

Programming Fonts
------------------
Select a fixed width, no ligatures
(i.e. arrow made of dashes and greater than looks like an arrow)

Website to see what they look like:
programmingfonts.org

Jacob Sorber's top choices:
Inconsolata
sourcecodepro
jet Brains Mono

Files
--------
fstat() function to get file status
mmap() to create a file in memory

Ethernet
---------
curl for putting together ethernet coms that is "easy" to do
Include <curl/curl.h> at the top of your file

ifconfig

sh script
------------
start with:
#! /bin/bash

put a .sh extension on it

then make it executable
chmod +x [filename]









