Personal github access token
-----------------------------
ed-access-token
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

eddaly62
Scout!2004


Settings -> Cross Settings
---------------
Prefix:
arm-none-linux-gnueabihf-

Path:
/home/gdc419/gcc-linaro/bin

Linker Options
----------------

-L/srv/nfs/rootfs/usr/lib -Wl,-rpath-link,/srv/nfs/rootfs/usr/lib -L/srv/nfs/rootfs/lib -Wl,-rpath-link,/srv/nfs/rootfs/lib

-L/home/gdc419/Images/Apalis-iMX6_Reference-Multimedia-Image-upstream-Tezi_5.6.0+build.18/usr/lib -Wl,-rpath-link,/home/gdc419/Images/Apalis-iMX6_Reference-Multimedia-Image-upstream-Tezi_5.6.0+build.18/usr/lib -L/home/gdc419/Images/Apalis-iMX6_Reference-Multimedia-Image-upstream-Tezi_5.6.0+build.18/lib -Wl,-rpath-link,/home/gdc419/Images/Apalis-iMX6_Reference-Multimedia-Image-upstream-Tezi_5.6.0+build.18/lib

-I<include path> - tells compiler were to search for libraries after the standard paths are searched


-l<shared library>

for example:
-lpthread translates to libpthread.so
The compiler will search the paths given in the -L flags for the librarys specified with the -l option

Now that your program compiles, it still may have a problem running.
If it uses shared libraries that are not in commonly searched path (/usr/lib, /lib) then you may get a "could not find library xxx error" when you run your program.

There are two ways to fix this.

1) set this environment variable, LD_LIBRARY_PATH, to the the path that your libraries are located. This is a short lived solution unless you add the setting to a script that gets run at start up

    LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/my_library/
    export LD_LIBRARY_PATH

If you go the $LD_LIBRARY_PATH route, you'll want to put that into your ~/.bashrc file so it will run every time you log in:

   export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/path/to/library


2) Add the following to the gcc command line when you compile your program:

   -Wl,-R/usr/local/lib

The -Wl,-R part tells the resulting binary to also look for the library in /usr/local/lib at runtime before trying to use the one in /usr/lib/.

Wl - are option is used to flag linker options, they are separated by commas.

The -R option embeds the path to the libraries path in the program, so it knows were to go find them...ie the path needs to exist and be valid on the target


Miscellanous Optimization Options
------------------------------------

-march=armv7-a -fno-tree-vectorize -mthumb-interwork -mfloat-abi=hard -mtune=cortex-a9 -Wno-poison-system-directories


Finding a library
-----------------
To find out where the library is, try this:

    sudo find / -iname *libraryname*.so*

(Replace libraryname with the name of your library)


Building a shared library
-------------------------
Flags for gcc

   -fPIC -shared

PIC = position independent code

Note: do not list libs before obj's on command line or you will get errors


Programs to query apps and libraries
-------------------------------------

nm <*.so>

Shows what is in a shared library

ldd <pgm>

Shows the libraries used by the program

scc

Checks cyclomatic complexity and other stats for the current working directory

file

Displays the type of file and what processor it is built for.


C/C++ -> Settings -> Build Steps -> Post Processing
----------------------------------------------------

Command:
scp ~/Projects/fbtest/Debug/fbtest root@192.168.20.64:/home/root/
scp ~/Projects/lv_port_linux_frame_buffer/Debug/lvglfb root@192.168.20.64:/home/root/

Description:
Copy fbtest Debug to Target
Copy lvglfb Debug to Target

To make a directory remotely using ssh, you can do something like this
    TESTDIR="$HOSTNAME"
    ssh user@server.com "mkdir -p ~/$TESTDIR/test"


Symbolic links
-------------------
ln -s longfilename target

To create symbolic links to all .txt files in ../allegro5 directory in the current directory:
Switch to the directory that you want the links in.
Then ln...

cd src
ln -sf ../allegro5/*.txt .

(flags: s=symbolic link, f=force, over-write links if they exist)

To remove all of the symbolic link files:
Change to the directory that you want to clean and type:

find -type l -delete

Another way:

find /usr/local/bin -lname '/usr/local/texlive/*' -delete

This scans /usr/local/bin for links and deletes all links that point to /usr/local/texlive/*

Can also use rm to remove the links.

tar - unzip
----------------
tar xvf tarfilename

tar - Create
--------------
tar -czvf file.tar.gz directory

example:
sudo tar -czvf allegro5-libs-arm.tar.gz /usr/local/lib/allegro5-libs-arm

note: this archive is compressed and the path is part of the archive (i.e. usr/local/lib)
      this may not be desirable if you want to unzip in a different path
The gz file extension is short for gzip (extension is tar.gz or .tgz)

where:
    -c - instructs tar to create a new archive.
    -z - sets the compression method to gzip.
    -f archive-name.tar.gz - specifies the archive name.
    -v to make the tar command more visible and print the names of the files being added
       to the archive on the terminal.

sudo tar -czvf arm-linux-gnueabihf.tar.gz arm-linux-gnueabihf

To test input events
---------------------
Try typing the following at the terminal:

cat /dev/input/event1

Then move the input device (i.e. mouse) and you should see characters being streamed to the display if event1 is mapped to the mouse for example.

You can test the event devices with the "evtest" utility.
Type:
evtest

And you should get a list of available input devices.
You will need to run at root, so you may need to ad sudo

sudo evtest

if not installed:
sudo apt install evtest

Display Resolution
--------------------
Can use:
xrandr

xrandr is an official configuration utility to the RandR (Resize and Rotate) X Window System extension.
It can be used to set the size, orientation or reflection of the outputs for a screen.


Check GPIO config
--------------------
cat /sys/kernel/debug/gpio

tty
------
Type:
tty
to see what terminal you are

Type:
who
to see all the terminals you are logged into


Testing a serial port
-----------------------
Notes from:
https://developer.toradex.com/getting-started/module-3-hardware-peripherals/basic-uart-usage-apalis-evaluation-board-apalis-imx6

For testing UART2

From a serial terminal connected to the module, configure the UART2 baud rate using the stty command. We will use a baud rate of 9600 baud:

	stty -F /dev/ttymxc1 9600 -echo

Use the cat command to listen for incoming data on the serial port:

	cat < /dev/ttymxc1 &

Write to the serial port. The characters sent will be printed back to you in the next line:

	echo "Testing UART" > /dev/ttymxc1

Testing UART

A UART loopback test can also be written in C.

Termios, the Unix API for terminal I/O will be employed.

An example will be introduced step-by-step. First of all, include some libraries and initialize variables:


Graph - Dot
--------------
To install:
	sudo apt install graphviz

website:
	graphviz.org


usage:
	dot example.dot -Tpdf > example.pdf

Creates a pdf file, can also create a jpg or svg file

sample code:
directional graph

digraph {
    p1 -> p2;
    p2 -> p3;
    p1 -> p3;
}

non-directional graph

graph {
    p1 -- p2;
    p2 -- p3;
    p1 -- p3;
}

Layouts:

dot -“hierarchical” or layered drawings of directed graphs.
neato -“spring model” layouts.
fdp -stands for Force Directed Placement.
sfdp -stands for Scalable Force Directed Placement.
circo - circular layout.
twopi -radial layout.
osage - draws clustered graphs.
patchwork -draws clustered graphs using a squarified treemap layout.

Add to change layout:
  	layout=circo;

Add to change shape:
    DAP_PATTERN_QUEUE [shape=box];



gdb debugger
--------------
break or b - set break point
run or r - run program
next or n - next (step to next c instruction
s - step in
n - next
p 'n'- display, where 'n' is a variable name
ref - display refresh (will use often)
list - list source code
x/16xb [address]- examine 16 bytes formatted in hex starting at address.
    x/16xb 0x555555556004
    good for looking at a variable or structure in hex.

To examine an array or variable in hex:

p/x [array name]

setting a break condition:
break <filename.c>:<line number> <condition>
break icorrupt.c:30 if(x>255)
break icorrupt.c:30 if x>255

Can use a TUI in gdb
TUI is a crude gdb GUI

Type:
layout next

This will launch the TUI.
It has several display formats, keep typing 'layout next' to cycle thru all the layouts

Can also select a tui by adding it to the command line:
gdb-multiarch -tui <pgm>
gdb -tui <pgm>

## Remote Debug:
ssh into target in one terminal

### on target:
gdbserver localhost:2001 <program>
Note 2001 is the port number

### on the host:
gdb-multi-arch -q <program>
NOTE: use FULL PATH for program, q flag is for quite

Once you get the (gdb) prompt type:
target remote 192.168.20.64:2001

That should make the connection

sometimes r doesn't work, try using c instead

For debugging forks and exec:
type:
set follow-fork-mode child
set follow-fork-mode parent
run

set follow-exec-mode new
run

core dumps
-----------

ulimit -c
see how much memory allocated for a core dump file

To change:
ulimit -c unlimited

Store it all.
File is called core

Use gdb to inspect
gdb ./a core
where ./a is the program name, core is a argument to gdb
This will take you to the point were the program crashed when you type run
Can use back trace or examine variable at time of crash.

For ubuntu:

core dumps are placed here:
/var/crash/

To enable Apport, run: sudo systemctl enable apport.service or sudo service apport start.

To disable, run: sudo systemctl disable apport.service or sudo service apport stop in order to back to regular core dumping method.

Apport is a serivice that gets the core dump

To disable permanently, edit /etc/apport/crashdb.conf file and comment the following line:

'problem_types': ['Bug', 'Package'],

by adding a hash symbol (#) in the beginning of the line.

Uncomment to restore


ssh
----
ssh keys are stored on your machine.
    ls -l .ssh

Use:
ssh-keygen
to generate your own public key
To copy your public key to a remote server
    ssh-copy-id root@192.168.20.64 (target ip address)

ssh-keygen will prompt you for a password. Use the password for the login on the target machine.
You can test the (public) key by running
    ssh root@192.168.20.64 (target ip address)

This will prompt you for a password to unlock the key,
use the password you entered to make the key, which should match the password of the login of the remote machine.

This removes the need to enter a password to remote shell


If connection is refused:

check if ssh is installed:
    ssh

if its not installed, install it:
    sudo apt install openssh-client

ssh server may not be running, see if it is running this:
    sudo service ssh status

Could be that the port is closed, usually ssh is on port 22.
to check which port ssh server is being run on:
    grep Port /etc/ssh/sshd_config

see if ssh daemon is running on target
    systemctl status sshd

if you get, ....sshd.service could not be found
then you need to install the openssh-server package
 sudo apt-get install openssh-server

if the ssh daemon is not running then start it:
    systemctl start sshd

to make the ssh daemon start at start up:
    sudo systemctl enable ssh

So you can ssh and scp remotely but you are get permission denied when you try to scp as root.
Open this file:
    vi /etc/ssh/sshd_config

look for:
    PermitRootLogin no

uncomment it and change it to yes

temp files
-----------
mkstemp() to make a temporary file
mkdtemp() to make temporary directory

hex editors
------------
ghex
hexdump

hex viewers
-----------
xxd <filename>

stack
---------
internal variable to find out stack frame address
__builtin_frame_address(0)


Some TUIs that are open source
-------------------------------
- xdialog
-Tcl/Tk

git
------

To get the current branch that you are on:
git rev-parse --abbrev-ref HEAD

To get the sha of what you checked out:
some examples:
git rev-parse development
git rev-parse origin/master

git rev-parse origin/master # to get the latest commit on the remote
git rev-parse HEAD          # to get the latest commit on the local 

dap repo:
http://bitbucket.generaldigital.com:7990/projects/DAP/repos/dap/browse


To branch and checkout at the same time:
git checkout -b new_branch_name

initialziing a repo:
git config --global user.name "Ed Daly"
git config --global user.email "edaly@generaldigital.com"

source (linux)
----------------
Can use "source" to execute a text file that contains linux commands

relative paths
----------------
Use realpath() function to get full path from a relative path

Unit test utilities
-------------------
* criterion - https://criterion.readthedocs.io/en/master/intro.html
unity ?
cmock
ceedling
* minunit

Programming Fonts
------------------
Select a fixed width, no ligatures
(i.e. arrow made of dashes and greater than looks like an arrow)

Website to see what they look like:
programmingfonts.org

Jacob Sorber top choices:
Inconsolata
sourcecodepro
jet Brains Mono

File system in RAM
-------------------
Look at:
mmap()
memfd_create()

Files
--------
fstat() function to get file status
mmap() to create a file in memory

Ethernet
---------
curl for putting together ethernet coms that is "easy" to do
Include <curl/curl.h> at the top of your file

ifconfig to get ip address

sh script
------------
start with the following on the first line:
#! /bin/bash

put a .sh extension on it

then make it executable
chmod +x [filename]


Inspecting Binaries
--------------------

To see all the strings in a program:
strings <pgm>

To see all the symbols:
    readelf --symbols <pgm>

To see all the shared libraries
    readelf -a <pgm> | grep Shared

To see segment and sections:
    readelf --segments <pgm>

To see the interpreter that the program will use, needs to match what is on the target
    readelf -a <pgm> | grep interpreter

To see all the shared files used in a library or program
    readelf -a <file> | grep Shared

To see the symbol table:
    objdump -t <pgm>

To see the section table:
    objdump -s <pgm>

To disassemble the pgm:
    objdump -d <pgm>


To remove al the symbols from a pgm:
    strip <pgm>


Valgrind
---------
Tool to check if an program has a memory leak.
Usage:

  valgrind <pgm>

Start simple and can add various flags to test more


System and Library Calls
------------------------
strace <pgm> - to see system calls of pgm
ltrace <pgm> - to see library calls of pgm


RE Regular Expressions
----------------------

RE generator:
https://regex-generator.olafneumann.org


Abstract Data types
--------------------
Abstract data types, making structs opaque
There contents can not be viewed or accessed by the app
Essentialy they are made private
------------------------------------------
Before:

    typedef struct {
        ----
        ----
    } queue;

After:

In header file, myq is never used but is needed (name of the struct)

    typedef struct myq queue;

In the source file. (myq is never used, but it is needed)

    typedef struct myq  {
        -----
        -----
    } queue;

With this approach you can not dereference the struct or you will get a
"dereferencing pointer to incomplete type" error.
If you declare the struct in your app you may get a "invalid use of incomplete typedef" or a
"do not know the size of..." errors.
You will need to create get and set functions in your library to access the elements in the struct.
Think pointer...


Markdown File Editors
---------------------
ghostwriter
ReText

Also various extensions are available for visual studio code.

  Markdown All in One - TOC feature
  https://markdown-all-in-one.github.io/docs/guide/#features

  Markdown PDF - creates a pdf file from your .md file

  Markdown Lint - you need this one to correct your formatting mistakes!!!

Table of contents - if your sub-headings have underscores in them, remove the underscores from the link field the filed with () brackets to make the links work.

Fonts
------
To find all the fonts installed on your system type:
    fc-list

After installing a font you run this command to update the list for programs that check the 
list of fonts available (i.e. gimp, libre, etc)

    fc-cache

System fonts are usually located:
    /usr/share/fonts
    /usr/local/share/fonts
    or local in you home dir

FontSquirrel.com
Good source of free fonts

Programming Fonts
------------------

Mono-spaced fonts good for programming.
Fixed width font
Aides in alignment of brackets, etc.

Check out:
  programmingfonts.org

Some popular choices:
Inconsolata
Sourcecodepro
Jet Brains Mono

Graphic Libraries
------------------
For linux:
  Allegro
  SDL
  SFML

Resource usage
--------------
This command displays all of the user executable processes
    ps ux

The VSZ column displays all the virtual memory space (shared librarys)

RSS - resident set size

/proc/ file system memory usage.
Every process has there stats in the /proc/ folderCan use cat and grep to get data

In a program you can use:
    getrusage() - to get resource usage (memory and time up/idle).

Another tool:
    htop
This is a much better version of top.


PCB Applications
-----------------
PCB design:
    Altium
    Eagle
    KiCad
    EasyEDA


Record and Print Screen on Ubuntu
---------------------------------

To start/stop recording:
  cntrl + alt + shift + R
You should see a yellow dot in the upper right corner of the display when recording
The video will be stored in your Video folder

To print the screen:
  Fn + PrntScreen (key)
The screen shot will be copied to your Picture folder



Wierd Warnings
---------------
PFNs busy [x]alloc_config_range

This is sometimes displayed on the target.
No bugs are caused that I can see.
Google searched show people developing com and video apps see this sometimes
Further searches indicate this is the cache or dma driver complaining to the kernel...to busy

I was able to fix this by making some pointers that I was manipulating volatile
This keeps these pointers from being cached. The warnings went away.


ASSERT and FAIL_IF Macros
--------------------------
#define ASSERT(cond, desc, serror) if( !(cond) )\
{fprintf(stderr, "ASSERT error, %s, line %d, file(%s), function(%s), errno(%s)\n", \
desc, __LINE__, __FILE__, __FUNCTION__, serror);}

// TODO - add return and switch over?
#define ASSERTNEW(cond, desc, serror) if( !(cond) )\
{fprintf(stderr, "ASSERT error, %s, line %d, file(%s), function(%s)\n", \
desc, __LINE__, __FILE__, __FUNCTION__);}

#define FAIL_IF(EXP,RCODE) {if(EXP) {fprintf(stderr,"errno(%s), file(%s), \
function(%s), line(%d)\n", strerror(errno), __FILE__, __FUNCTION__,__LINE__); \
return RCODE;}}

can also use:
    assert(condition);

remember to include assert.hard
user the -DNDDebug flag to remove the assert for release versions
the -D creates a preprocessor flag and NDebug is a preprocessor define that causes assert to not
be part of the build

indenting / formatters
-----------------------

linux app:
    indent

also:
    clang-format

mounting a usb driver
---------------------

Create a mount point:
    mkdir /media/usb-drive

Plug it in.
When it enumerates...the display will indicate what type it is (usually sdb)

To see which device is your usb stick
Use ls /dev
Look for the sdb devices when its plugged in and when its not plugged in to determine which is yours.
The one that disappears when its unplugged is your device.

Once you know, you can mount it

mount /dev/sdb1 /media/usb-driver

Then access it by writing and reading to "usb-driver"

When done unmount it
    umount /media/usb-drive

Copy a directory recursively, preserving links
----------------------------------------------
??
Follows the symbolic links and creates copis of the actual files
cp -rL /source /destination
r = recursive L = follow and expand symlinks

Works:
To preserve the links while copying using cp, us the -P flag
cp -P /home/gdc419/arm-linux-gnueabihf/libX11.so* /home/gdc419/arm-libs

Good Resources
--------------

Jacob Sorber on YouTube
embeddedarmdev on YouTube


